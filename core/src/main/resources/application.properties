# database init, supports mysql too
# enables H2 console. Available under URL: http://localhost:8080/h2-console
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=krzysieksr
spring.datasource.password=keySPass??!8465
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.database=h2
spring.h2.console.enabled=true
spring.h2.console.settings.web-allow-others=true
server.port=8080

#Initializse DB and data
#spring.datasource.schema=classpath*:db/${database}/schema.sql
#spring.datasource.data=classpath*:db/${database}/data.sql

# JPA
spring.jpa.hibernate.ddl-auto=create
spring.jpa.open-in-view=false
#Turns on Logging work of transactions by Hibernate
#spring.jpa.show-sql=true

# Internationalization
spring.messages.basename=messages/messages

# Actuator
management.endpoints.web.exposure.include=*

# Logging
logging.level.org.springframework=INFO
# logging.level.org.springframework.web=DEBUG
# logging.level.org.springframework.context.annotation=TRACE

# Spring Security password
#TODO not need for now
#spring.security.user.password=21o3ij128ej29rfh

# Spring Security padding for custom filter (drop priority of default filters)
spring.security.filter.order=10

productDetailsCache.boundSize=4

spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.auto-offset-reset=earliest
